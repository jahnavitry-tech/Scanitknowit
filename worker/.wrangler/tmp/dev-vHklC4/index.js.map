{
  "version": 3,
  "sources": ["../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-1Un0Cd/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-1Un0Cd/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\deepa\\Downloads\\Scanitknowit-up\\worker\\.wrangler\\tmp\\dev-vHklC4",
  "sourcesContent": ["export interface Env {\r\n  OPENROUTER_API_KEY: string;\r\n  NINJA_API_KEY: string;\r\n}\r\n\r\nexport default {\r\n  async fetch(req: Request, env: Env): Promise<Response> {\r\n    const url = new URL(req.url);\r\n\r\n    // Root landing page\r\n    if (url.pathname === \"/\") {\r\n      return new Response(\r\n        `\r\n        <html>\r\n          <head><title>\uD83D\uDE80 Scan It Know It Worker</title></head>\r\n          <body style=\"font-family:sans-serif;\">\r\n            <h2>\uD83D\uDE80 Scan It Know It Worker is running</h2>\r\n            <ul>\r\n              <li><a href=\"/health\">/health</a></li>\r\n              <li><a href=\"/api/identify\">/api/identify</a></li>\r\n              <li><a href=\"/api/ingredients\">/api/ingredients</a></li>\r\n              <li><a href=\"/api/calories?query=banana\">/api/calories</a></li>\r\n              <li><a href=\"/api/reddit?query=coffee\">/api/reddit</a></li>\r\n              <li><a href=\"/api/qa\">/api/qa</a></li>\r\n            </ul>\r\n          </body>\r\n        </html>`,\r\n        { headers: { \"Content-Type\": \"text/html\" } }\r\n      );\r\n    }\r\n\r\n    // Health check\r\n    if (url.pathname === \"/health\") {\r\n      return Response.json({ ok: true, status: \"healthy\" });\r\n    }\r\n\r\n    // Identify endpoint\r\n    if (url.pathname === \"/api/identify\" && req.method === \"POST\") {\r\n      const body = await req.json() as { text?: string };\r\n      const text = body?.text || \"unknown\";\r\n      return Response.json({ identified: text });\r\n    }\r\n\r\n    // Ingredients endpoint (OpenRouter LLM)\r\n    if (url.pathname === \"/api/ingredients\" && req.method === \"POST\") {\r\n      const body = await req.json() as { text?: string };\r\n      const text = body?.text;\r\n      if (!text) return new Response(\"Missing 'text' field\", { status: 400 });\r\n\r\n      const response = await fetch(\"https://openrouter.ai/api/v1/chat/completions\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${env.OPENROUTER_API_KEY}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: \"gpt-4o-mini\",\r\n          messages: [{ role: \"user\", content: `List ingredients and health notes for: ${text}` }],\r\n        }),\r\n      });\r\n\r\n      const data = await response.json() as { choices?: { message?: { content?: string } }[] };\r\n      const content = data?.choices?.[0]?.message?.content || \"No data\";\r\n      return Response.json({ result: content });\r\n    }\r\n\r\n    // Calories endpoint\r\n    if (url.pathname === \"/api/calories\" && req.method === \"GET\") {\r\n      const query = url.searchParams.get(\"query\");\r\n      if (!query) return new Response(\"Missing ?query parameter\", { status: 400 });\r\n\r\n      const res = await fetch(`https://api.api-ninjas.com/v1/nutrition?query=${encodeURIComponent(query)}`, {\r\n        headers: { \"X-Api-Key\": env.NINJA_API_KEY },\r\n      });\r\n\r\n      if (!res.ok) return Response.json({ error: \"Invalid API Key or request\" }, { status: res.status });\r\n\r\n      const data = await res.json();\r\n      return Response.json({ food: query, nutrition: data });\r\n    }\r\n\r\n    // Reddit endpoint\r\n    if (url.pathname === \"/api/reddit\" && req.method === \"GET\") {\r\n      const query = url.searchParams.get(\"query\");\r\n      if (!query) return new Response(\"Missing ?query parameter\", { status: 400 });\r\n\r\n      const res = await fetch(`https://www.reddit.com/search.json?q=${encodeURIComponent(query)}&limit=5`, {\r\n        headers: { \"User-Agent\": \"ScanItKnowIt/1.0\" },\r\n      });\r\n\r\n      const json = await res.json().catch(() => null) as { data?: { children?: Array<{ data?: { title?: string, permalink?: string } }> } } | null;\r\n      const posts = json?.data?.children?.map((c: { data?: { title?: string, permalink?: string } }) => ({\r\n        title: c.data?.title || \"\",\r\n        url: `https://reddit.com${c.data?.permalink || \"\"}`,\r\n      })) || [];\r\n\r\n      return Response.json({ query, posts });\r\n    }\r\n\r\n    // QA endpoint (OpenRouter LLM)\r\n    if (url.pathname === \"/api/qa\" && req.method === \"POST\") {\r\n      const body = await req.json() as { question?: string, context?: string };\r\n      const { question, context } = body;\r\n\r\n      const response = await fetch(\"https://openrouter.ai/api/v1/chat/completions\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${env.OPENROUTER_API_KEY}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: \"gpt-4o-mini\",\r\n          \"messages\": [\r\n            { role: \"system\", content: \"You are a food and nutrition assistant.\" },\r\n            { role: \"user\", content: `Context: ${context}\\nQuestion: ${question}` },\r\n          ],\r\n        }),\r\n      });\r\n\r\n      const data = await response.json() as { choices?: { message?: { content?: string } }[] };\r\n      const answer = data?.choices?.[0]?.message?.content || \"No answer.\";\r\n      return Response.json({ answer });\r\n    }\r\n\r\n    return new Response(\"Not Found\", { status: 404 });\r\n  },\r\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\deepa\\\\Downloads\\\\Scanitknowit-up\\\\worker\\\\src\\\\index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\deepa\\\\Downloads\\\\Scanitknowit-up\\\\worker\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\deepa\\\\Downloads\\\\Scanitknowit-up\\\\worker\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\deepa\\\\Downloads\\\\Scanitknowit-up\\\\worker\\\\src\\\\index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\deepa\\\\Downloads\\\\Scanitknowit-up\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-1Un0Cd\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\deepa\\\\Downloads\\\\Scanitknowit-up\\\\worker\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\deepa\\\\Downloads\\\\Scanitknowit-up\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-1Un0Cd\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\deepa\\\\Downloads\\\\Scanitknowit-up\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-1Un0Cd\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
